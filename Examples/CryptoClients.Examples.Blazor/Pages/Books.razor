@page "/books"
@using CryptoExchange.Net.Interfaces
@using CryptoExchange.Net.SharedApis
@inject IExchangeOrderBookFactory BookFactory
@implements IDisposable

<PageTitle>Live Local Order Books</PageTitle>

<div>
    <h2>BTC USDT live books</h2>

    @foreach(var book in _books)
    {
        <div style="margin-top: 20px">
            <b>@book.Key</b>
            <table>
                <tr>
                    <th>Ask Quantity</th>
                    <th style="padding-left: 5px;">Ask Price</th>
                    <th style="padding-left: 10px;">Bid Price</th>
                    <th style="padding-left: 5px;">Bid Quantity</th>
                </tr>

                @{
                    var (asks, bids) = @book.Value.Book;
                    if (asks.Any())
                    {
                        for (var i = 0; i <= 2; i++)
                        {
                            <tr>
                                <td>@asks.ElementAt(i).Quantity</td>
                                <td style="padding-left: 5px;">@asks.ElementAt(i).Price</td>
                                <td style="padding-left: 10px;">@bids.ElementAt(i).Price</td>
                                <td style="padding-left: 5px;">@bids.ElementAt(i).Quantity</td>
                            </tr>
                        }
                    }
                }
            </table>
        </div>
    }
</div>

@code
{
    private Dictionary<string, ISymbolOrderBook> _books = new Dictionary<string, ISymbolOrderBook>();

    private Timer? _timer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var symbol = new SharedSymbol(TradingMode.Spot, "BTC", "USDT");
            foreach (var exchange in Exchange.All)
                _books.Add(exchange, BookFactory.Create(exchange, symbol, 5)!);

            var tasks = new List<Task>();
            foreach (var book in _books.Values)
                tasks.Add(book.StartAsync());
            await Task.WhenAll(tasks);

            _timer = new Timer(async (x) => await InvokeAsync(StateHasChanged), null, 0, 1000);
        }
    }

    public void Dispose()
    {
        foreach (var book in _books)
            book.Value.StopAsync();

        _timer?.Dispose();
    }
}