@page "/live"
@using CryptoExchange.Net.CommonObjects
@using CryptoExchange.Net.Objects
@using CryptoExchange.Net.Objects.Sockets
@using CryptoExchange.Net.SharedApis
@using System.Collections.Concurrent
@inject IExchangeSocketClient SocketClient
@implements IDisposable

<PageTitle>Live trades</PageTitle>

<div>
    <h2>@_baseAsset @_quoteAsset live trades</h2>

    <div><b>Statistics</b></div>
    <table>
        <tr>
            <th>Exchange</th>
            <th style="padding-left: 20px">Total volume</th>
            <th style="padding-left: 20px">Total value</th>
        </tr>
        @foreach(var exchangeVolume in _volume.OrderByDescending(v => v.Value))
        {
        <tr>
            <td>@exchangeVolume.Key</td>
                <td style="padding-left: 20px">@Math.Round(exchangeVolume.Value.BaseVolume, 8)</td>
                <td style="padding-left: 20px">@exchangeVolume.Value.QuoteVolume.ToString("C")</td>
        </tr>
        }
    </table>
    <div>Total volume: @Math.Round(_volume.Select(x => x.Value.BaseVolume).Sum(), 8) / @_volume.Select(x => x.Value.QuoteVolume).Sum().ToString("C")</div>

    
    <table style="margin-top: 20px;">
        <tr>
            <th>Exchange</th>
            <th style="padding-left: 20px">Price</th>
            <th style="padding-left: 20px">Quantity</th>
        </tr>
        @lock(_lock){
    @foreach(var trade in _trades.OrderByDescending(t => t.Trade.Timestamp))
    {
        <tr>
                <td>@trade.Exchange</td>
                <td style="padding-left: 20px">@Math.Round(trade.Trade.Price, 2)</td>
                <td style="padding-left: 20px">@Math.Round(trade.Trade.Quantity, 8)</td>
        </tr>
    }
        }
    </table>
</div>

@code
{
    class ExchangeTrade
    {
        public string Exchange { get; set; }
        public Trade Trade { get; set; }

        public ExchangeTrade(string exchange, Trade trade)
        {
            Exchange = exchange;
            Trade = trade;
        }
    }

    private object _lock = new object();
    private int _max = 100;
    private List<ExchangeTrade> _trades = new List<ExchangeTrade>();
    private ConcurrentDictionary<string, (decimal BaseVolume, decimal QuoteVolume)> _volume = new ConcurrentDictionary<string, (decimal, decimal)>();

    private string _baseAsset = "BTC";
    private string _quoteAsset = "USDT";


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var symbol = new SharedSymbol(TradingMode.Spot, _baseAsset, _quoteAsset);
            var request = new SubscribeTradeRequest(symbol);
            await SocketClient.SubscribeToTradeUpdatesAsync(request, HandleUpdate);
        }
    }

    private void HandleUpdate(ExchangeEvent<IEnumerable<SharedTrade>> trades)
    {
        foreach(var trade in trades.Data)
            AddTrade(trades.Exchange, trade.Price, trade.Quantity, trade.Timestamp);
    }

    private void AddTrade(string exchange, decimal price, decimal quantity, DateTime timestamp)
    {
        lock (_lock)
        {
            _trades.Add(new ExchangeTrade(exchange, new Trade
                {
                    Price = price,
                    Quantity = quantity,
                    Timestamp = timestamp
                }));

            if (_volume.TryGetValue(exchange, out var val))
                _volume[exchange] = (val.BaseVolume + quantity, val.QuoteVolume + (price * quantity));
            else
                _volume[exchange] = (quantity, price * quantity);

            if (_trades.Count > _max)
                _trades.RemoveAt(0);
        }
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        SocketClient.UnsubscribeAllAsync();
    }
}